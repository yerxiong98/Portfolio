
Yer Xiong
4/28/2023
1st

Superstore Sales


----------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE DATABASE store;

--@block
USE store;

--@block create table to store data FROM file superstore_sales.csv
CREATE TABLE sales(
row_id INT PRIMARY KEY,
order_id varchar(50),
order_date date,
ship_date date,
ship_mode VARCHAR(50),
customer_id VARCHAR(50),
customer_name VARCHAR(100),
segment VARCHAR(50),
country VARCHAR(100),
city VARCHAR(100),
state VARCHAR(100),
postal_code varchar(100),
region VARCHAR(50),
product_id VARCHAR(100),
category VARCHAR(100),
sub_category VARCHAR(100),
product_name VARCHAR(200),
sales DECIMAL(7,2)
);

/* 
PROBLEM 1

The date value for column order_date and ship_date was an incorrect date value
because the format was DD/MM/YYYY. At this current time I thought the easiest solution was to open
the csv in Google Sheets and clean it up there which my next problem came. 

The dates in the superstore_sales csv were in two different formats, 
one being dd/mm/yyyy as a date and dd/mm/yyyy being recognized as a text. Because of this =datevalue() 
was not able to get a date value from atleast half of the dates.

What I did was probably not the best way but what worked for me with my current knowledge was to use 
=right([cell],4) to get the year in one column as S1
=mid([cell],4,2) to get the month in the next column S2
=left([cell],2) to get the day in the following column S3
I also had a cell with the text '-' X1

I then used =concatenate(S1,$X$1,S2,$X$1,S3) to get the text YYYY-MM-DD
I then used =datevalue(previous_function) to the the text into a value ex:42659
which I then replaced all the dates for columns order_date with their corresponding datevalue.
I also did the same for ship_date. I then formatted the two columns into YYYY-MM-DD. 

*/

--@block use LOAD DATA to load superstore_sales csv data into table sales
LOAD DATA infile 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/superstore.csv'
INTO TABLE sales
fields terminated BY ','
optionally enclosed BY '"'
escaped BY '"'
lines terminated BY '\n'
IGNORE 1 LINES
(row_id, order_id, order_date, ship_date, ship_mode, customer_id, customer_name, segment, country,
city, state, postal_code, region, product_id, category, sub_category, product_name, sales);

--@block
SELECT * FROM sales
ORDER BY customer_name ASC;

--@block renamed sales column to total_sales so its not the same name as the table 
ALTER TABLE sales
rename column sales to total_sales;

--@block query data on repeat customers
SELECT customer_name, sum(total_sales) as total FROM sales
WHERE customer_id IN
(SELECT customer_id from sales
GROUP BY customer_id
HAVING COUNT(*)>1)
GROUP BY customer_id
ORDER BY total DESC;

--@block query with a cte for finding data from single time customers from sales 
WITH single AS (
SELECT customer_id FROM sales
GROUP BY customer_id
HAVING COUNT(*) = 1)

SELECT * FROM sales
RIGHT JOIN single ON sales.customer_id = single.customer_id;

--@block 
/*

Same problem as above but not using a cte since the cte above is 
not really doing anything needing a cte so I just used a simple subquery and not a join

*/

SELECT * FROM sales
WHERE customer_id IN (SELECT customer_id FROM sales
GROUP BY customer_id
HAVING COUNT(*) = 1);

--@block query to find how many repeast customers there are
SELECT DISTINCT(count(customer_id))-(SELECT count(customer_id) FROM sales
WHERE customer_id IN
(SELECT customer_id FROM sales
GROUP BY customer_id
HAVING COUNT(*) = 1)) FROM sales;


--@block query to sort all sub categories, categories, and their respective totals
SELECT DISTINCT sub_category, category, sum(total_sales) AS total FROM sales
GROUP BY sub_category
ORDER BY total DESC;

--@block test
SELECT order_id, order_date, customer_name, customer_id, sum(total_sales) AS total FROM sales
WHERE customer_name = 'Aaron Bergman'
GROUP BY order_id
ORDER BY customer_name, order_date ASC;


--@block query to find average number of days between each purchase by a customer
SELECT avg(averages) FROM (SELECT datediff(max(order_date),min(order_date))/count(DISTINCT order_date) as averages from sales
GROUP BY customer_id) AS average_each;


--@block query time between order date and ship date for each sub_category of a category
WITH diff_dates AS
(
    select *, datediff(ship_date,order_date) AS days_between from sales
)

SELECT sub_category, category, avg(days_between) AS avg_delivery FROM diff_dates
GROUP BY sub_category
ORDER BY avg_delivery DESC;

--@block query to see sales across cities
SELECT city, state, country, postal_code, SUM(total_sales) AS sum_sales FROM sales
GROUP BY city
ORDER BY sum_sales DESC;

--@block query category,segment, sum of total sales
SELECT category, segment, sum(total_sales) as sum_sales FROM sales
GROUP BY segment,category
ORDER BY category ASC,sum_sales DESC;


--@block
SELECT * FROM sales;

--@block create table us_population to reference future queries to 
CREATE TABLE us_population
(
    STATE VARCHAR(20) primary key,
    POPESTIMATE2019 INT,
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6)
);

--@block load data into table us_population
LOAD DATA infile 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/us_pop_state.csv'
INTO TABLE us_population
fields terminated BY ','
lines terminated BY '\n'
IGNORE 1 LINES
(state,popestimate2019,latitude,longitude);

--@block add constraint primary key to us_populatation.state after it was already created
ALTER TABLE us_population
add CONSTRAINT PK_state PRIMARY KEY(state);

--@block add foreign key to sales table referencing us_population.state after table was already existing
ALTER TABLE sales
ADD FOREIGN KEY (state) REFERENCES us_population(state);

--@block select to show what states customers are located in compared to population of each state
SELECT state, count(customer_name) as cust_state, population FROM sales s
LEFT JOIN us_population p USING (state)
GROUP BY state
ORDER BY cust_state DESC;

--@block renaming column popestimate2019 to population 
ALTER TABLE us_population
RENAME column popestimate2019 TO population;

--@block select to get states, populations, and percent of total pop
SELECT state, population, 100*population/(SELECT sum(population) FROM us_population) AS percent_pop FROM us_population
ORDER BY percent_pop DESC;

--@block
/*WITH count_cust_state AS
(SELECT state, count(DISTINCT customer_name) as cust_state FROM sales
GROUP BY state)

SELECT state, sum(cust_state), cust_state FROM count_cust_state
group by state; */

SELECT DISTINCT customer_name, 
    Count(*) OVER (PARTITION BY state) AS pop_state, 
    SUM(pop_state) OVER () total_cust
FROM sales;


--@block
SELECT * FROM sales;

--@block
/*

holidays?
what months most sales per city
zip code sales
what year most sales
what ship mode most? per state? 
what region sales? category? sub? 
how many cisco products did we sell?




*/


--@block 
/*query to find how many sales were made on christmas and what category most,
and how much did those sales account for total sales that year */

with christmas as (SELECT  *, sum(total_sales) as total, year(order_date) as year_cm FROM sales
WHERE month(order_date) = 12 AND day(order_date) = 25
GROUP BY category, year_cm
ORDER BY year_cm DESC )

SELECT year_cm ,sum(total) AS total_cm_year FROM christmas
GROUP BY year_cm;

--@block total sales per year
SELECT year(order_date) as year_sales, sum(total_sales) FROM sales
GROUP BY year_sales
ORDER BY year_sales asc;

--@block total sales per zipcode?
SELECT postal_code, sum(total_sales) as sales_zip FROM sales
GROUP BY postal_code
ORDER BY sales_zip DESC;

--@block how many cisco products did we sell? per year? per state?
SELECT year(order_date) as year, state, count(product_name) as cisco_products_sold FROM sales
WHERE product_name regexp '^cisco|%cisco%|cisco$'
GROUP BY year, state
ORDER BY year, cisco_products_sold DESC;

--@block how many _______ products did we sell per year per state?
SELECT YEAR(order_date) AS year, state, category, COUNT(category) AS category_sold FROM sales
GROUP BY state, category, year
ORDER BY state ASC,year asc;

--@block does ship_mode have any correlation to average order sale? no/minimal
SELECT ship_mode, avg(total_sales) as total FROM sales
GROUP BY ship_mode
ORDER BY ship_mode, total DESC;

--@block

SELECT order_date, sum(total_sales)  FROM sales
group by order_date
order by order_date asc;

--@block
select row_id,customer_name,customer_id, order_id, product_id, total_sales from sales
where (select count(product_id) from sales group by customer_id) > 1
group by customer_id;

--@block
select row_id, order_id, customer_id, customer_name, product_id, product_name, count(*) from sales
group by customer_id, product_name
having count(*) > 1;

